<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>DualPersonality</title>
    <link href="/2023/06/19/DualPersonality/"/>
    <url>/2023/06/19/DualPersonality/</url>
    
    <content type="html"><![CDATA[<h3 id="Dual-Personality"><a href="#Dual-Personality" class="headerlink" title="Dual Personality"></a>Dual Personality</h3><h4 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h4><blockquote><p>  ​天堂之门(heaven’s gate)</p><p>  ​简单的反调试</p></blockquote><h4 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h4><blockquote><p>start -&gt; scrt_common_main -&gt; scrt_common_main_seh -&gt; invoke_main -&gt;  main</p></blockquote><p>进入main函数发现无法f5，遂看汇编</p><p><img src="/2023/06/19/DualPersonality/F5.png" alt="F5"></p><p>根据相关压栈操作猜测scanf函数和input输入地址。</p><p>sub_401120:</p><p><img src="/2023/06/19/DualPersonality/sub_401120.png" alt="sub_401120"></p><p>传进的参数根据cdecl的方式可以判定a2是dword_4011D0，Size为7</p><p><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc">virtualAlloc 函数 (memoryapi.h) - Win32 apps | Microsoft Learn</a></p><p>VirtualAlloc函数可以参考如上手册，这里利用了这个函数改变了407050地址处的内存，memcpy将返回地址处的指令存储到407050处。</p><p>关于v2实现了怎么样的跳转？</p><blockquote><p>0xe9是jmp rel32,相当于EIP +&#x3D; rel32。jmp rel32占5个字节，x86架构EIP自然指向下一条指令<br>那么在执行这个jmp rel32的时候，EIP &#x3D; v2 + 5，上面的式子中，rel32 &#x3D; (retaddr + a1) - v2- 5 &#x3D; (retaddr + a1) - v2 - 5<br>所以执行完这个jmp, EIP&#x3D; v2 + 5 + (retaddr + a1)-v2- 5 &#x3D; retaddr + a1，也就刚刚好是回到原来被拷贝走的代码之后</p></blockquote><p>而利用retaddr非常巧妙地构造了一个跳转:</p><table><thead><tr><th>addr</th><th>code</th></tr></thead><tbody><tr><td>retaddr0</td><td>0xEA</td></tr><tr><td>retaddr1</td><td>0xD0</td></tr><tr><td>retaddr2</td><td>0x10</td></tr><tr><td>retaddr3</td><td>0x40</td></tr><tr><td>retaddr4</td><td>0x00</td></tr><tr><td>retaddr5</td><td>0x33</td></tr><tr><td>retaddr6</td><td>0x00</td></tr></tbody></table><p>也就是在返回地址处写入了0xEAD01040003300</p><p>pwntools可以解析这个机器码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">pwn disasm &#x27;EAD01040003300&#x27;<br>0:    ea d0 10 40 00 33 00     jmp    0x33:0x4011d0<br></code></pre></td></tr></table></figure><p>需要注意的是，这边的jmp far是通过基地址+偏移地址的方式进行跳转的，这个跳转的实现使得cs寄存器变为0x33，eip寄存器变为0x4010d0，利用cs:eip使得程序继续执行。至此，这个32位程序开始运行64位的机器码，即传入的第二个参数int a2处的机器码。该技术也被称之为天堂之门(heaven’s gate)。事实上，天堂之门的技术完全是由硬件实现的，通过修改cs寄存器的值使得cpu能够切换运行模式。但是值得注意的是windows调度cpu或者保护现场类似的操作还是由软件完成的。</p><p>天堂之门的相关技术介绍：</p><p>底层原理<a href="https://www.malwaretech.com/2014/02/the-0x33-segment-selector-heavens-gate.html">The 0x33 Segment Selector (Heavens Gate) (malwaretech.com)</a></p><p>windows协调cpu[<a href="https://bbs.kanxue.com/thread-270153.htm">原创]天堂之门 (Heaven’s Gate) C语言实现-软件逆向-看雪论坛-安全社区|安全招聘|bbs.pediy.com (kanxue.com)</a></p><p>综上，sub_401120可以被视为一个进入天堂之门的操作，先mark一下，更名为x32to64。</p><p>对于该函数第一次调用进行分析，发现程序接下来会以x64模式执行0x4010d0处的shellcode，因此双击查看4010d0处内容，将其设置为长度为一个字节的数组。shift+e导出数组，按照64位机器码进行分析。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs assembly"> 0:    65 48 8b 04 25 60 00 00 00       mov    rax,  QWORD PTR gs:0x60<br> 9:    8a 40 02                 mov    al,  BYTE PTR [rax+0x2]<br> c:    88 04 25 5c 70 40 00     mov    BYTE PTR ds:0x40705c,  al<br>13:    84 c0                    test   al,  al<br>15:    75 0e                    jne    0x25<br>17:    41 bc ae 66 f9 5d        mov    r12d,  0x5df966ae<br>1d:    44 89 24 25 58 70 40 00          mov    DWORD PTR ds:0x407058,  r12d<br>25:    44 b8 00 70 40 00        rex.R mov eax,  0x407000 ;rex.R/W/X/B的介绍https://wiki.osdev.org/X86-64_Instruction_Encoding#REX_prefix<br>2b:    48 ff 28                 rex.W jmp FWORD PTR [rax];在这里置eax就可以将rax高位全部清零，FWORD对应five word，即取了407000开始的十个字节<br>2e:    cc                       int3 ;具体跳转方式见https://www.felixcloutier.com/x86/jmp<br>2f:    cc                       int3 ;通过ida查看内存可以发现cs寄存器取WORD PTR [407008]即0x23<br>     ;rip寄存器的值为DWORD PTR[407000]，即在401120函数中申请的407050指向的内存区域。<br>      ;至此，CPU从x64模式再次切换为x32模式，并且回到了先前保存的x32模式下的返回地址处的指令 <br></code></pre></td></tr></table></figure><p>​需要注意的是这段代码的第一行，QWORD PTR GS:[0x60]以四字的形式读取了GS:0x60处的内容，查阅相关文档可以了解到在x64模式下，这里存放的是PEB(process environment block) </p><p>关于PEB的详细介绍可以看<a href="https://en.wikipedia.org/wiki/Process_Environment_Block">https://en.wikipedia.org/wiki/Process_Environment_Block</a></p><p>微软官方给出了PEB结构体的具体实现：<a href="https://learn.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb">https://learn.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_PEB</span> &#123;<br>  BYTE                          Reserved1[<span class="hljs-number">2</span>];<br>  BYTE                          BeingDebugged;<br>  BYTE                          Reserved2[<span class="hljs-number">1</span>];<br>  PVOID                         Reserved3[<span class="hljs-number">2</span>];<br>  PPEB_LDR_DATA                 Ldr;<br>  PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;<br>  PVOID                         Reserved4[<span class="hljs-number">3</span>];<br>  PVOID                         AtlThunkSListPtr;<br>  PVOID                         Reserved5;<br>  ULONG                         Reserved6;<br>  PVOID                         Reserved7;<br>  ULONG                         Reserved8;<br>  ULONG                         AtlThunkSListPtr32;<br>  PVOID                         Reserved9[<span class="hljs-number">45</span>];<br>  BYTE                          Reserved10[<span class="hljs-number">96</span>];<br>  PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;<br>  BYTE                          Reserved11[<span class="hljs-number">128</span>];<br>  PVOID                         Reserved12[<span class="hljs-number">1</span>];<br>  ULONG                         SessionId;<br>&#125; PEB, *PPEB;<br></code></pre></td></tr></table></figure><p>因此上面得到的汇编代码中 MOV AL,BYTE PTR [RAX+02] 正好读取了PEB中的调试标志位。如果程序正在被调试，则置40705C为1</p><p>之后执行的逻辑按照汇编代码的注释可以自行理解，大意上就是如果调试标志位不是1就将0x407058的内存空间初始化为0x5df966ae，反之则不进行初始化，默认为0。</p><p>第一次出门之后的操作：</p><p><img src="/2023/06/19/DualPersonality/FirstOut.png" alt="FirstOut"></p><p>将0x407058的内存空间减去0x21524111，在调试状态下未初始化的内存空间0x100000000-0x21524111 &#x3D; 0xdeadbeef ，如果知道这个Magic Number的含义可能能够更容易地发现存在反调试。程序正常运行时此处的值为0x3ca7259d。而后利用栈帧存储输入的内存，跳转到401417，看一遍汇编可以得出如下加密逻辑：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ;i &lt; <span class="hljs-number">8</span> ;i++)&#123;<br>    __int64 a = <span class="hljs-number">0x3ca7259d</span>;<br>input[i]+= a;<br>a = a^input[i];<br>&#125;<br></code></pre></td></tr></table></figure><p>之后的程序逻辑如下：</p><p><img src="/2023/06/19/DualPersonality/then.png" alt="then"></p><p>通过call fword的方式完成了函数的执行：fword的解析方式同之前汇编描述的一样，这个call语句使程序跳转到0x401200处以x64模式执行函数。同样将对应内存进行一波反汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs assembly"> 0:    55                       push   rbp<br> 1:    48 8b ec                 mov    rbp,  rsp<br> 4:    a0 5c 70 40 00 00 00 00 00       movabs al,  ds:0x40705c<br> d:    84 c0                    test   al,  al<br> f:    74 34                    je     0x45<br>11:    48 8b 45 10              mov    rax,  QWORD PTR [rbp+0x10]<br>15:    48 8b 18                 mov    rbx,  QWORD PTR [rax]<br>18:    48 c1 c3 20              rol    rbx,  0x20<br>1c:    48 89 18                 mov    QWORD PTR [rax],  rbx<br>1f:    48 8b 58 08              mov    rbx,  QWORD PTR [rax+0x8]<br>23:    48 c1 c3 20              rol    rbx,  0x20<br>27:    48 89 58 08              mov    QWORD PTR [rax+0x8],  rbx<br>2b:    48 8b 58 10              mov    rbx,  QWORD PTR [rax+0x10]<br>2f:    48 c1 c3 20              rol    rbx,  0x20<br>33:    48 89 58 10              mov    QWORD PTR [rax+0x10],  rbx<br>37:    48 8b 58 18              mov    rbx,  QWORD PTR [rax+0x18]<br>3b:    48 c1 c3 20              rol    rbx,  0x20<br>3f:    48 89 58 18              mov    QWORD PTR [rax+0x18],  rbx<br>43:    eb 37                    jmp    0x7c<br>45:    48 8b 45 10              mov    rax,  QWORD PTR [rbp+0x10]<br>49:    48 8b 18                 mov    rbx,  QWORD PTR [rax]<br>4c:    48 c1 c3 0c              rol    rbx,  0xc<br>50:    48 89 18                 mov    QWORD PTR [rax],  rbx<br>53:    48 8b 58 08              mov    rbx,  QWORD PTR [rax+0x8]<br>57:    48 c1 c3 22              rol    rbx,  0x22<br>5b:    48 89 58 08              mov    QWORD PTR [rax+0x8],  rbx<br>5f:    48 8b 58 10              mov    rbx,  QWORD PTR [rax+0x10]<br>63:    48 c1 c3 38              rol    rbx,  0x38<br>67:    48 89 58 10              mov    QWORD PTR [rax+0x10],  rbx<br>6b:    48 8b 58 18              mov    rbx,  QWORD PTR [rax+0x18]<br>6f:    48 c1 c3 0e              rol    rbx,  0xe<br>73:    48 89 58 18              mov    QWORD PTR [rax+0x18],  rbx<br>77:    bb 00 00 00 00           mov    ebx,  0x0<br>7c:    bb 00 00 00 00           mov    ebx,  0x0<br>81:    48 33 c0                 xor    rax,  rax<br>84:    48 8b e5                 mov    rsp,  rbp<br>87:    5d                       pop    rbp<br>88:    ca 08 00                 retf   0x8<br></code></pre></td></tr></table></figure><p>拖到ida64里或者手动看都行，前者需要创建一个segment，从401200到401288，选择64位模式，转化为代码。</p><p><img src="/2023/06/19/DualPersonality/x64-Flow.png" alt="x64-Flow"></p><p>可以看到根据之前判断出的程序是否被调试分成了两种操作。回看之前call fword的栈结构，可以发现传入这个函数的参数是input数组。相当于八位一组进行ROL的操作。此外需要注意的是，在这个函数中对于栈并未进行修改，因此retf时会pop ip再pop cs，即程序再次回到call调用时的x86模式，从call语句的下一句开始运行。</p><p>接下来又是和第一次加密一样的操作：</p><p><img src="/2023/06/19/DualPersonality/SecondEnc.png" alt="SecondEnc"></p><p>将byte_401290进行反汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs assembly"> 0:    48 33 c0                 xor    rax,  rax<br> 3:    48 b8 c5 14 40 00 00 00 00 00    movabs rax,  0x4014c5<br> d:    89 04 25 00 70 40 00     mov    DWORD PTR ds:0x407000,  eax<br>14:    48 8d 04 25 14 70 40 00          lea    rax,  ds:0x407014<br>1c:    8a 18                    mov    bl,  BYTE PTR [rax]<br>1e:    8a 48 04                 mov    cl,  BYTE PTR [rax+0x4]<br>21:    22 d9                    and    bl,  cl<br>23:    88 18                    mov    BYTE PTR [rax],  bl<br>25:    8a 58 04                 mov    bl,  BYTE PTR [rax+0x4]<br>28:    8a 48 08                 mov    cl,  BYTE PTR [rax+0x8]<br>2b:    0a d9                    or     bl,  cl<br>2d:    88 58 04                 mov    BYTE PTR [rax+0x4],  bl<br>30:    8a 58 08                 mov    bl,  BYTE PTR [rax+0x8]<br>33:    8a 48 0c                 mov    cl,  BYTE PTR [rax+0xc]<br>36:    32 d9                    xor    bl,  cl<br>38:    88 58 08                 mov    BYTE PTR [rax+0x8],  bl<br>3b:    8a 58 0c                 mov    bl,  BYTE PTR [rax+0xc]<br>3e:    f6 d3                    not    bl<br>40:    88 58 0c                 mov    BYTE PTR [rax+0xc],  bl<br>43:    48 33 c0                 xor    rax,  rax<br>46:    ff 24 25 50 70 40 00     jmp    QWORD PTR ds:0x407050<br></code></pre></td></tr></table></figure><p><strong>注意这里已经修改了407000处的内容！</strong></p><p>407014处内存：</p><p><img src="/2023/06/19/DualPersonality/Mem.png" alt="Mem"></p><p>可以解出处理过后为0x4,0x77,0x82,0x4a，之后利用jmp    QWORD PTR ds:0x407050 跳转到407050处，但是此时还是在x64模式下运行，所以此时返回地址处虽然能够显示部分看似合理的汇编指令，但是其实使用了错误的模式，正确的指令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs assembly"> 0:    83 c4 08                 add    esp,  0x8<br> 3:    85 c0                    test   eax,  eax<br> 5:    75 05                    jne    0xc<br> 7:    48 8b 04 25 c8 70 40 00          mov    rax,  QWORD PTR ds:0x4070c8<br> f:    48 83 f8 20              cmp    rax,  0x20<br>13:    74 40                    je     0x55<br>15:    48 33 d2                 xor    rdx,  rdx<br>18:    48 b9 04 00 00 00 00 00 00 00    movabs rcx,  0x4<br>22:    48 f7 f1                 div    rcx<br>25:    48 8d 1c 25 14 70 40 00          lea    rbx,  ds:0x407014<br>2d:    8a 14 93                 mov    dl,  BYTE PTR [rbx+rdx*4]<br>30:    48 8b 04 25 c8 70 40 00          mov    rax,  QWORD PTR ds:0x4070c8<br>38:    48 8d 1c 25 60 70 40 00          lea    rbx,  ds:0x407060<br>40:    8a 0c 03                 mov    cl,  BYTE PTR [rbx+rax*1]<br>43:    32 ca                    xor    cl,  dl<br>45:    88 0c 03                 mov    BYTE PTR [rbx+rax*1],  cl<br>48:    48 ff c0                 inc    rax<br>4b:    48 89 04 25 c8 70 40 00          mov    QWORD PTR ds:0x4070c8,  rax<br>53:    eb b2                    jmp    0x7<br>55:    44 b8 00 70 40 00        rex.R mov eax,  0x407000<br>5b:    48 ff 28                 rex.W jmp FWORD PTR [rax]<br></code></pre></td></tr></table></figure><p>又是一个循环结构，其中407060的内存是我们的input，大致可以写成四位一组异或八遍0x4a827704，之后像之前一样利用0x407000跳转到4014c5开始执行后续程序。</p><p>后续程序其实就非常简单了，就是一个逐位比对。</p><p>总结一下，第一步加密为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">__int64 a = <span class="hljs-number">0x3ca7259d</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ;i &lt; <span class="hljs-number">8</span> ;i++)&#123;<br>input[i]+= a;<br>a = a^input[i];<br>&#125;<br></code></pre></td></tr></table></figure><p>第二步加密为分4组循环左移</p><p>第三步加密为异或0x4,0x77,0x82,0x4a</p><h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">tar = [<span class="hljs-number">0xaa</span>,<span class="hljs-number">0x4f</span>,<span class="hljs-number">0x0f</span>,<span class="hljs-number">0xe2</span>,<span class="hljs-number">0xe4</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x99</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x2c</span>,<span class="hljs-number">0x2b</span>,<span class="hljs-number">0x84</span>,<span class="hljs-number">0x7e</span>,<span class="hljs-number">0xbc</span>,<span class="hljs-number">0x8f</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x88</span>,<span class="hljs-number">0x5e</span>,<span class="hljs-number">0xae</span>,<span class="hljs-number">0x47</span>,<span class="hljs-number">0x85</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0xb3</span>,<span class="hljs-number">0x09</span>,<span class="hljs-number">0xce</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">0xf5</span>,<span class="hljs-number">0x0d</span>,<span class="hljs-number">0xca</span>]<br>xor = [<span class="hljs-number">0x4</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0x82</span>,<span class="hljs-number">0x4a</span>]<br>r = [<span class="hljs-number">12</span>,<span class="hljs-number">34</span>,<span class="hljs-number">56</span>,<span class="hljs-number">14</span>]<br>key = <span class="hljs-number">0x3ca7259d</span><br>tmp = []<br>ror = <span class="hljs-keyword">lambda</span> a,b : (a&gt;&gt;b) | ((a&lt;&lt;(<span class="hljs-number">64</span>-b))&amp;((<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">64</span>)-<span class="hljs-number">1</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(tar)):<br>    tar[i] ^= xor[i%<span class="hljs-number">4</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    _ = ror(<span class="hljs-built_in">int</span>.from_bytes(tar[i*<span class="hljs-number">8</span>:(i+<span class="hljs-number">1</span>)*<span class="hljs-number">8</span>],<span class="hljs-string">&#x27;little&#x27;</span>),r[i])<br>    tmp.append(_&amp;<span class="hljs-number">0xffffffff</span>)<br>    tmp.append(_&gt;&gt;<span class="hljs-number">32</span>&amp;<span class="hljs-number">0xffffffff</span>)<br>flag = <span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    nk = key<br>    key ^= tmp[i]<br>    tmp[i] = (tmp[i] - nk)&amp;<span class="hljs-number">0xffffffff</span><br>    flag +=<span class="hljs-built_in">int</span>.to_bytes(tmp[i],<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;little&#x27;</span>)<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#6cc1e44811647d38a15017e389b3f704</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>组会分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>heaven&#39;s gate</tag>
      
      <tag>anti-debug</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
